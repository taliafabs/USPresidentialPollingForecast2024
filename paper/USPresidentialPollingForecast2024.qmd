---
title: "This Election is too Close to Call: Poll of Polls Methodology and Bayesian Modeling Results show a Statistical Tie in the Seven Battleground States"
subtitle: "Forecasting the 2024 U.S. Presidential Election using FiveThirtyEight Polling Data and Poll of Polls Methodology Resulted in ..."
author: 
  - Talia Fabregas
  - Fatimah Yunusa
  - Aliza Mithwani
thanks: "The code and data used to perform this presidential election forecast can be found at: [https://github.com/taliafabs/USPresidentialPollingForecast2024.git](https://github.com/taliafabs/USPresidentialPollingForecast2024.git)."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false
#| echo: false

# lines 24-26 were written with the help of ChatGPT
required_packages <- c("tidyverse", "janitor", "ggplot2", "scales", "rstanarm",  "bayesplot", "splines", "knitr", "kableExtra", "arrow", "here")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)

library(tidyverse)
library(janitor)
library(ggplot2)
library(scales)
library(rstanarm)
library(bayesplot)
library(splines)
library(knitr)
library(kableExtra)
library(here)

# line 38 was written with the help of ChaatGPT
setwd(here::here())
analysis_data <- arrow::read_parquet("data/02-analysis_data/analysis_data.parquet")
harris_analysis_data <- arrow::read_parquet("data/02-analysis_data/harris-analysis_data.parquet")
trump_analysis_data <- arrow::read_parquet("data/02-analysis_data/trump-analysis_data.parquet")
```

# Introduction

<!-- Overview paragraph -->

The U.S. Presidential Election will take place on Tuesday November 5th. Vice President Kamala Harris and former President Donald Trump will vie to become the 47th President of the United States. Vice President Kamala Harris became the Democratic nominee after 82-year-old President Joe Biden made a historic and unprecedented decision to end his re-election campaign on July 21, 2024. She secured enough delegates to win the Democratic nomination on Vice President Kamala Harris and Former President Donald Trump ... President Joe Biden made the unprecedented decision to end his re-election campaign on July 21, 2024 and immediately endorsed Vice President Kamala Harris. She became the presumptive Democratic presidential nominee the same day and secured enough delegates to win the nomination on July 28.

This study only considers polling data from after President Joe Biden ended his re-election campaign and Vice President Kamala Harris became the presumptive Democratic nominee for President. Polls conducted before July 21, 2024 were not considered because they include President Joe Biden, who is no longer running for President, as the Democratic nominee.

<!-- Estimand paragraph -->

<!-- Results paragraph -->

<!-- Why it matters paragraph -->

The remainder of this paper is structured as follows. @sec-data contains an overview of the dataset, summary statistics and visualizations. @sec-model contains the Bayesian regression used to ... @sec-results contains the results of applying the Bayesian regression model. @sec-discussion. [Appendix -@sec-idealized-meth]

# Data {#sec-data}

## Overview

This presidential election forecast was performed using the statistical programming language R [@citeR] and Presidential general election polling data from FiveThirtyEight [@fivethirtyeight]. The data was downloaded on October 29, 2024; polling data released after this date was not considered anywhere in this paper. The presidential polls dataset from FiveThirtyEight contains national polls and state-level polls for each of the 50 states and congressional districts in Maine and Nebraska [@fivethirtyeight]. We cleaned this dataset to only include high-quality polls at the national and state-level. However, we only analyzed state-level data for the seven swing states that are expected to determine the results of this election: Michigan, Wisconsin, Pennsylvania, North Carolina, Georgia, Nevada, and Arizona.

## Measurement

Some paragraphs about how we go from a phenomena in the world to an entry in the dataset.

## Outcome and predictor variables

Add graphs, tables and text. Use sub-sub-headings for each outcome variable or update the subheading to be singular.

### National and swing state polling averages over time

```{r}
#| label: tbl-avgsummary
#| tbl-cap: Polling averages for Harris and Trump at the national level and at the state level for the states included in the polling dataset as of October 29, 2024 show a narrow popular vote lead for Vice President Harris and extremely close races between Vice President Harris and former President Trump in the seven battleground states (Arizona, Georgia, Nevada, North Carolina, Michigan, Pennsylvania, Wisconsin).
#| echo: false
#| warning: false
#| message: false

analysis_data_harris <- analysis_data |>
  filter(end_date >= as.Date("2024-07-21"))

swing_states <- c("Arizona", "Georgia", "Nevada", "Pennsylvania", "Michigan", "Wisconsin", "North Carolina")

polling_averages <- analysis_data_harris %>%
  filter(state == "National" | state %in% analysis_data_harris$state) %>%
  group_by(state) %>%
  filter(end_date == max(end_date)) %>% 
  mutate(
    pct_harris = if_else(candidate_name == "Kamala Harris", pct, NA_real_),
    pct_trump = if_else(candidate_name == "Donald Trump", pct, NA_real_)
  ) %>%
  summarise(
    Harris = mean(pct_harris, na.rm = TRUE),
    Trump = mean(pct_trump, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  # Rename National to Popular Vote
  mutate(state = if_else(state == "National", "Popular Vote", state)) %>%
  # Reorder to ensure Popular Vote is first
  arrange(match(state, c("Popular Vote", swing_states)))

# Create the kable with the modified state names
polling_table <- polling_averages %>%
  select(State = state, `Harris (%)` = Harris, `Trump (%)` = Trump)

# Display the table
kable(polling_table, format = "html", digits = 2)
```

This takes into account date and state.

Since President Biden ended his re-election campaign and Vice President Harris became the Democratic Presidential nominee, the polls have shown a dead heat between Vice President Harris and former President Trump. Polling averages for the six months leading up to election day, including from before President Biden withdrew on July 21, 2024 can be found in [Appendix -@sec-Biden].

```{r}
#| label: fig-nationalavg2
#| fig-cap: National popular vote polling averages for Harris and Trump since Biden ended his re-election campaign on July 21, 2024. As of October 29, 2024, Harris has a narrow lead over Trump.
#| echo: false
#| warning: false
#| message: false

national2 <- analysis_data |>
  filter(state=="National",
         (candidate_name == "Kamala Harris" | candidate_name == "Donald Trump"),
         end_date >= as.Date("2024-07-21")
         )

ggplot(national2, aes(x = end_date, y = pct, color = candidate_name)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.25) +            # Add points for each individual poll
  scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
  # geom_vline(xintercept = as.Date("2024-07-21"), linetype = "dashed", color = "darkgray") +
  labs(title = "National Polling Average Harris v Trump",
       x = "",
       y = "",
       color = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %e")
```

```{r}
#| label: fig-sevenbattlegroundskamala
#| fig-cap: seven battleground states with harris
#| echo: false
#| warning: false
#| message: false
#| 
sevenbattlegrounds2 <- analysis_data |>
  filter((state=="Wisconsin" | state == "Michigan" | state == "Pennsylvania" |
           state == "Nevada" | state == "Arizona" | state == "Georgia" | 
           state == "North Carolina" | state == "Nebraska CD-2"),
         (candidate_name == "Kamala Harris" | candidate_name == "Donald Trump"),
         end_date >= as.Date("2024-07-21"))

ggplot(sevenbattlegrounds2, aes(x = end_date, y = pct, color = candidate_name)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.15) +            # Add points for each individual poll
  scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
  labs(title = "swing states",
       x = "",
       y = "",
       color = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %e") +
  facet_wrap(~state)
```

### Pollster

Talk more about it.

```{r}
#| label: fig-pollsters1
#| fig-cap: Pollsters caption
#| echo: false
#| warning: false
#| message: false

harris_versus_trump <- analysis_data |>
  filter(end_date >= as.Date("2024-07-21"))

ggplot(national2, aes(x = end_date, y = pct, color = candidate_name)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.25) +            # Add points for each individual poll
  scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
  # geom_vline(xintercept = as.Date("2024-07-21"), linetype = "dashed", color = "darkgray") +
  labs(title = "National Polling Average Harris v Trump by Pollster",
       x = "",
       y = "",
       color = "") +
  theme_minimal() +
  theme(strip.text = element_text(size = 8)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %e") +
  facet_wrap(~pollster)
```

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

### Methodology

```{r}
#| label: fig-methodology
#| fig-cap: National polling averages for Kamala Harris and Donald Trump since July 21 have varied by methodology. Live phone polls had Trump leading by a narrow margin until mid-September, online panel polls have had Harris in the lead since early August, and probability panel polls have shown a shrinking lead for Harris since shortly after Predient Biden ended his campaign.
#| echo: false
#| warning: false
#| message: false

ggplot(national2, aes(x = end_date, y = pct, color = candidate_name)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.25) +            # Add points for each individual poll
  scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
  # geom_vline(xintercept = as.Date("2024-07-21"), linetype = "dashed", color = "darkgray") +
  labs(title = "",
       x = "",
       y = "",
       color = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %e") +
  facet_wrap(~methodology)
```

After conducting further exploratory data analysis, we decided not to include methodology in our model because it is strongly related to pollster. Using pollster as a predictor sufficiently accounts for methodology. We discuss this decision in depth in @sec-model. Different pollsters tend to use different methodologies.

```{r}
#| label: fig-methodology-by-pollster
#| fig-cap: In polls conducted after Vice President Harris became the Democratic nominee, every pollster used a distinct methdology.
#| echo: false
#| warning: false
#| message: false
methodology_counts <- national2 |>
  group_by(pollster, methodology) |>
  summarise(count = n(), .groups = 'drop')

ggplot(methodology_counts, aes(x = methodology, y = count, fill = pollster)) +
  geom_bar(stat = "identity", position = "dodge") +  # Use 'dodge' for side-by-side bars
  labs(title = "",
       x = "",
       y = "",
       fill = "") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none",  # Remove the legend
    strip.text = element_text(size = 7.5)  # Adjust title size of each facet
  ) +
  facet_wrap(~pollster)  # Facet wrap by pollster
```

### Pollscore

```{r}

```

<!-- ## Predictor variables -->

Add graphs, tables and text.

Use sub-sub-headings for each outcome variable and feel free to combine a few into one if they go together naturally.

# Model {#sec-model}

The goal of our modelling strategy is twofold.
We use a Bayesian analysis model to investigate the relationship between the percentage of voters in a poll who support Vice President Harris or Former President Trump and the date the poll was conducted, the state (or if it was a national poll), the pollster who conducted the poll, and the pollscore it received.

Here we briefly describe the Bayesian analysis model used to investigate... Model details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.

```{=tex}
\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}
```
We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.

### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.

# Results {#sec-results}

Our results are summarized in Model results are in the appendix. @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(rstanarm)

harris_model <-
  readRDS(file = here::here("models/harris_model.rds"))

trump_model <- 
  readRDS(file = here::here("models/trump_model.rds"))
```

## National Popular Vote Results

Popular vote prediction after applying

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(splines)

harris_analysis_data$state <- factor(harris_analysis_data$state)
harris_analysis_data$pollster <- factor(harris_analysis_data$pollster)
harris_analysis_data$pollscore <- as.numeric(as.character(harris_analysis_data$pollscore))

# Chat GPT was used to help write this code
# Define the unique levels of pollster
pollster_levels <- levels(harris_analysis_data$pollster)
pollscore_levels <- unique(harris_analysis_data$pollscore)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  harris_new_data <- data.frame(
    end_date_num = seq(
      min(harris_analysis_data$end_date_num),
      max(harris_analysis_data$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("National", levels = levels(harris_analysis_data$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(harris_model, newdata = harris_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
harris_pred_summary <- harris_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

harris_spline_plot <- ggplot(harris_analysis_data, aes(x = end_date_num, y = pct_harris, color = pollster)) +
    geom_point() +
    geom_line(
      data = harris_pred_summary,
      aes(x = end_date_num, y = pred_mean),
      color = "blue",
      inherit.aes = FALSE
    ) +
    geom_ribbon(
      data = harris_pred_summary,
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper),
      alpha = 0.2,
      inherit.aes = FALSE
    ) +
    labs(
      x = "Days since Biden withdrew",
      y = "Percentage",
      title = "Poll Percentage over Time with Spline Fit"
    ) +
    theme_minimal() +
    scale_y_continuous(labels = scales::percent_format(scale = 1)) 
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(splines)
trump_analysis_data$state <- factor(trump_analysis_data$state)
trump_analysis_data$pollster <- factor(trump_analysis_data$pollster)
trump_analysis_data$pollscore <- as.numeric(as.character(trump_analysis_data$pollscore))


# Define unique pollster levels
pollster_levels <- levels(trump_analysis_data$pollster)

# Initialize list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create trump_new_data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  trump_new_data <- data.frame(
    end_date_num = seq(
      min(trump_analysis_data$end_date_num),
      max(trump_analysis_data$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("National", levels = levels(trump_analysis_data$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(trump_model, newdata = trump_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
trump_pred_summary <- trump_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# Plot using the aggregated predictions
trump_spline_plot <- ggplot(trump_analysis_data, aes(x = end_date_num, y = pct_trump, color = pollster)) +
  geom_point() +
  geom_line(
    data = trump_pred_summary,
    aes(x = end_date_num, y = pred_mean),
    color = "red",
    inherit.aes = FALSE
  ) +
  geom_ribbon(
    data = trump_pred_summary,
    aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper),
    alpha = 0.2,
    inherit.aes = FALSE
  ) +
  labs(
    x = "Days since Biden withdrew",
    y = "",
    title = "Poll Percentage over Time with Spline Fit (Trump)"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) 
```

```{r}
#| label: fig-harristrumpspline
#| fig-cap: caption
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| layout-ncol: 2

harris_spline_plot
trump_spline_plot
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

# Add a candidate column with full names to each summary data frame
harris_pred_summary <- harris_pred_summary %>%
  mutate(candidate = "Kamala Harris")

trump_pred_summary <- trump_pred_summary %>%
  mutate(candidate = "Donald Trump")

# Combine the data frames
combined_pred_summary <- bind_rows(harris_pred_summary, trump_pred_summary)

# Plot the combined data with both candidates' lines and ribbons
ggplot() +
  # Plot the original data points for Harris
  # geom_point(data = harris_analysis_data, aes(x = end_date_num, y = pct_harris, color = pollster), alpha = 0.6) +
  # Plot the original data points for Trump
  # geom_point(data = trump_analysis_data, aes(x = end_date_num, y = pct_trump, color = pollster), alpha = 0.6) +
  # Plot the prediction line for Kamala Harris
  geom_line(
    data = combined_pred_summary %>% filter(candidate == "Kamala Harris"),
    aes(x = end_date_num, y = pred_mean, color = candidate),
    inherit.aes = FALSE
  ) +
  # Plot the prediction line for Donald Trump
  geom_line(
    data = combined_pred_summary %>% filter(candidate == "Donald Trump"),
    aes(x = end_date_num, y = pred_mean, color = candidate),
    inherit.aes = FALSE
  ) +
  # Plot the prediction ribbon for Kamala Harris
  geom_ribbon(
    data = combined_pred_summary %>% filter(candidate == "Kamala Harris"),
    aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
    alpha = 0.1,
    inherit.aes = FALSE
  ) +
  # Plot the prediction ribbon for Donald Trump
  geom_ribbon(
    data = combined_pred_summary %>% filter(candidate == "Donald Trump"),
    aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
    alpha = 0.1,
    inherit.aes = FALSE
  ) +
  labs(
    x = "Days since Biden withdrew",
    y = "",
    title = "National Poll % Over Time with Spline Fit"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
  scale_fill_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
      guides(
      color = guide_legend(
        title = "Candidate", 
        override.aes = list(fill = NA, linetype = 1)
      ),
      fill = "none"
    )
```

## State-Level Results for the Seven Battleground States and Nebraska's Second Congressional District

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(splines)

# ARIZONA 
# harris arizona
harris_arizona <- 
  harris_analysis_data |> 
  filter(state == "Arizona" | state == "National")

pollster_levels <- levels(harris_arizona$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  harris_new_data <- data.frame(
    end_date_num = seq(
      min(harris_arizona$end_date_num),
      max(harris_arizona$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Arizona", levels = levels(harris_arizona$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(harris_model, newdata = harris_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
harris_pred_summary_az <- harris_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# trump arizona
trump_arizona <- 
  trump_analysis_data |>
  filter(state == "Arizona" | state == "National")

pollster_levels <- levels(trump_arizona$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  trump_new_data <- data.frame(
    end_date_num = seq(
      min(trump_arizona$end_date_num),
      max(trump_arizona$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Arizona", levels = levels(trump_arizona$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(trump_model, newdata = trump_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
trump_pred_summary_az <- trump_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# plot it
harris_pred_summary_az <- harris_pred_summary_az %>%
  mutate(candidate = "Kamala Harris")

trump_pred_summary_az <- trump_pred_summary_az %>%
  mutate(candidate = "Donald Trump")

# Combine the data frames
combined_pred_summary_az <- bind_rows(harris_pred_summary_az, trump_pred_summary_az)

# Plot the combined data with both candidates' lines and ribbons
plot_az <- 
    ggplot() +
    # Plot the original data points for Harris
    geom_point(data = harris_arizona, aes(x = end_date_num, y = pct_harris, color = pollster), alpha = 0.6) +
    # Plot the original data points for Trump
    geom_point(data = trump_arizona, aes(x = end_date_num, y = pct_trump, color = pollster), alpha = 0.6) +
    # Plot the prediction line for Kamala Harris
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction line for Donald Trump
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Kamala Harris
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Donald Trump
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    labs(
      x = "Days since Biden withdrew",
      y = "",
      title = "Arizona"
    ) +
    theme_minimal() +
    scale_y_continuous(labels = scales::percent_format(scale = 1)) +
    scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    scale_fill_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    # guides(color = guide_legend(title = ""), fill = guide_legend(title = "Candidate"))
    guides(
      color = guide_legend(
        title = "Candidate", 
        override.aes = list(fill = NA, linetype = 1)
      ),
      fill = "none"
    )
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(splines)
# Georgia
# harris georgia
harris_georgia <- 
  harris_analysis_data |> 
  filter(state == "Georgia" | state == "National")

pollster_levels <- levels(harris_georgia$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  harris_new_data <- data.frame(
    end_date_num = seq(
      min(harris_georgia$end_date_num),
      max(harris_georgia$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Georgia", levels = levels(harris_georgia$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(harris_model, newdata = harris_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
harris_pred_summary_az <- harris_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# trump georgia
trump_georgia <- 
  trump_analysis_data |>
  filter(state == "Georgia" | state == "National")

pollster_levels <- levels(trump_georgia$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  trump_new_data <- data.frame(
    end_date_num = seq(
      min(trump_georgia$end_date_num),
      max(trump_georgia$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Georgia", levels = levels(trump_georgia$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(trump_model, newdata = trump_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
trump_pred_summary_az <- trump_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# plot it
harris_pred_summary_az <- harris_pred_summary_az %>%
  mutate(candidate = "Kamala Harris")

trump_pred_summary_az <- trump_pred_summary_az %>%
  mutate(candidate = "Donald Trump")

# Combine the data frames
combined_pred_summary_az <- bind_rows(harris_pred_summary_az, trump_pred_summary_az)

# Plot the combined data with both candidates' lines and ribbons
plot_ga <- 
    ggplot() +
    # Plot the original data points for Harris
    geom_point(data = harris_georgia, aes(x = end_date_num, y = pct_harris, color = pollster), alpha = 0.6) +
    # Plot the original data points for Trump
    geom_point(data = trump_georgia, aes(x = end_date_num, y = pct_trump, color = pollster), alpha = 0.6) +
    # Plot the prediction line for Kamala Harris
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction line for Donald Trump
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Kamala Harris
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Donald Trump
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    labs(
      x = "Days since Biden withdrew",
      y = "",
      title = "Georgia"
    ) +
    theme_minimal() +
    scale_y_continuous(labels = scales::percent_format(scale = 1)) +
    scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    scale_fill_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    # guides(color = guide_legend(title = ""), fill = guide_legend(title = "Candidate"))
    guides(
      color = guide_legend(
        title = "Candidate", 
        override.aes = list(fill = NA, linetype = 1)
      ),
      fill = "none"
    )
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(splines)
# Nevada
harris_nevada <- 
  harris_analysis_data |> 
  filter(state == "Nevada" | state == "National")

pollster_levels <- levels(harris_nevada$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  pollscore = random_pollscore
  harris_new_data <- data.frame(
    end_date_num = seq(
      min(harris_nevada$end_date_num),
      max(harris_nevada$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Nevada", levels = levels(harris_nevada$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(harris_model, newdata = harris_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
harris_pred_summary_az <- harris_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# trump nevada
trump_nevada <- 
  trump_analysis_data |>
  filter(state == "Nevada" | state == "National")

pollster_levels <- levels(trump_nevada$pollster)

# Initialize a list to store predictions for each pollster
all_pollster_preds <- list()

# Loop over each pollster to generate predictions
for (p in pollster_levels) {
  # Create new data for each pollster
  random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
  trump_new_data <- data.frame(
    end_date_num = seq(
      min(trump_nevada$end_date_num),
      max(trump_nevada$end_date_num),
      length.out = 100
    ),
    pollster = factor(p, levels = pollster_levels),
    state = factor("Nevada", levels = levels(trump_nevada$state)),
    pollscore = random_pollscore
  )
  
  # Generate posterior predictions for this pollster
  preds <- posterior_predict(trump_model, newdata = trump_new_data)
  all_pollster_preds[[p]] <- preds  # Store in list
}

# Combine predictions across all pollsters
# Convert list of matrices into a 3D array: [iterations, predictions, pollster]
all_pollster_preds_array <- simplify2array(all_pollster_preds)

# Calculate summary statistics across pollsters
# Averaging predictions across pollsters at each iteration
pred_mean <- apply(all_pollster_preds_array, c(1, 2), mean)
pred_lower <- apply(all_pollster_preds_array, 2, quantile, probs = 0.025)
pred_upper <- apply(all_pollster_preds_array, 2, quantile, probs = 0.975)

# Combine these into a summary data frame
trump_pred_summary_az <- trump_new_data %>%
  mutate(
    pred_mean = colMeans(pred_mean),
    pred_lower = pred_lower,
    pred_upper = pred_upper
  )

# plot it
harris_pred_summary_az <- harris_pred_summary_az %>%
  mutate(candidate = "Kamala Harris")

trump_pred_summary_az <- trump_pred_summary_az %>%
  mutate(candidate = "Donald Trump")

# Combine the data frames
combined_pred_summary_az <- bind_rows(harris_pred_summary_az, trump_pred_summary_az)

# Plot the combined data with both candidates' lines and ribbons
plot_nv <- 
    ggplot() +
    # Plot the original data points for Harris
    geom_point(data = harris_nevada, aes(x = end_date_num, y = pct_harris, color = pollster), alpha = 0.6) +
    # Plot the original data points for Trump
    geom_point(data = trump_nevada, aes(x = end_date_num, y = pct_trump, color = pollster), alpha = 0.6) +
    # Plot the prediction line for Kamala Harris
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction line for Donald Trump
    geom_line(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, y = pred_mean, color = candidate),
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Kamala Harris
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Kamala Harris"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    # Plot the prediction ribbon for Donald Trump
    geom_ribbon(
      data = combined_pred_summary_az %>% filter(candidate == "Donald Trump"),
      aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
      alpha = 0.1,
      inherit.aes = FALSE
    ) +
    labs(
      x = "Days since Biden withdrew",
      y = "",
      title = "Nevada"
    ) +
    theme_minimal() +
    scale_y_continuous(labels = scales::percent_format(scale = 1)) +
    scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    scale_fill_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    # guides(color = guide_legend(title = ""), fill = guide_legend(title = "Candidate"))
    guides(
      color = guide_legend(
        title = "Candidate", 
        override.aes = list(fill = NA, linetype = 1)
      ),
      fill = "none"
    )
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(dplyr)
library(ggplot2)
library(broom)

# Define the swing states
swing_states <- c("Nevada", "Arizona", "Georgia", "Michigan", "Pennsylvania", "North Carolina", "Wisconsin", "Nebraska CD-2")

# Initialize an empty list to store plots
all_plots <- list()
state_margins <- list()

# Loop over each swing state
for (state in swing_states) {
  # Filter data for the current state
  harris_state <- harris_analysis_data %>% filter(state == state | state == "National")
  trump_state <- trump_analysis_data %>% filter(state == state | state == "National")
  
  # Get pollster levels for the current state
  pollster_levels <- levels(harris_state$pollster)

  # Initialize a list to store predictions for Harris
  harris_preds <- list()

  # Generate predictions for Harris
  for (p in pollster_levels) {
    random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
    harris_new_data <- data.frame(
      end_date_num = seq(min(harris_state$end_date_num), max(harris_state$end_date_num), length.out = 100),
      pollster = factor(p, levels = pollster_levels),
      state = factor(state, levels = levels(harris_state$state)),
      pollscore = random_pollscore
    )
    
    preds <- posterior_predict(harris_model, newdata = harris_new_data)
    harris_preds[[p]] <- preds
  }

  # Combine predictions for Harris
  harris_preds_array <- simplify2array(harris_preds)
  harris_pred_mean <- apply(harris_preds_array, c(1, 2), mean)
  harris_pred_lower <- apply(harris_preds_array, 2, quantile, probs = 0.025)
  harris_pred_upper <- apply(harris_preds_array, 2, quantile, probs = 0.975)
  
  harris_pred_summary <- harris_new_data %>%
    mutate(pred_mean = colMeans(harris_pred_mean),
           pred_lower = harris_pred_lower,
           pred_upper = harris_pred_upper,
           candidate = "Kamala Harris")

  # Initialize a list to store predictions for Trump
  trump_preds <- list()
  
  # Generate predictions for Trump
  for (p in pollster_levels) {
    random_pollscore <- sample(c(-1.1, -1.5, -1.2), 1)
    trump_new_data <- data.frame(
      end_date_num = seq(min(trump_state$end_date_num), max(trump_state$end_date_num), length.out = 100),
      pollster = factor(p, levels = pollster_levels),
      state = factor(state, levels = levels(trump_state$state)),
      pollscore = random_pollscore
    )
    
    preds <- posterior_predict(trump_model, newdata = trump_new_data)
    trump_preds[[p]] <- preds
  }

  # Combine predictions for Trump
  trump_preds_array <- simplify2array(trump_preds)
  trump_pred_mean <- apply(trump_preds_array, c(1, 2), mean)
  trump_pred_lower <- apply(trump_preds_array, 2, quantile, probs = 0.025)
  trump_pred_upper <- apply(trump_preds_array, 2, quantile, probs = 0.975)
  
  trump_pred_summary <- trump_new_data %>%
    mutate(pred_mean = colMeans(trump_pred_mean),
           pred_lower = trump_pred_lower,
           pred_upper = trump_pred_upper,
           candidate = "Donald Trump")

  margin <- mean(harris_pred_summary$pred_mean - trump_pred_summary$pred_mean)
  state_margins[[state]] <- margin
  # Combine predictions for both candidates
  combined_pred_summary <- bind_rows(harris_pred_summary, trump_pred_summary)

  # Plot for the current state
  plot <- ggplot() +
    geom_point(data = harris_state, aes(x = end_date_num, y = pct_harris, color = pollster), alpha = 0.6) +
    geom_point(data = trump_state, aes(x = end_date_num, y = pct_trump, color = pollster), alpha = 0.6) +
    geom_line(data = combined_pred_summary %>% filter(candidate == "Kamala Harris"),
              aes(x = end_date_num, y = pred_mean, color = candidate), inherit.aes = FALSE) +
    geom_line(data = combined_pred_summary %>% filter(candidate == "Donald Trump"),
              aes(x = end_date_num, y = pred_mean, color = candidate), inherit.aes = FALSE) +
    geom_ribbon(data = combined_pred_summary %>% filter(candidate == "Kamala Harris"),
                aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
                alpha = 0.1, inherit.aes = FALSE) +
    geom_ribbon(data = combined_pred_summary %>% filter(candidate == "Donald Trump"),
                aes(x = end_date_num, ymin = pred_lower, ymax = pred_upper, fill = candidate),
                alpha = 0.1, inherit.aes = FALSE) +
    labs(x = "Days since Biden withdrew", y = "", title = state) +
    theme_minimal() +
    scale_y_continuous(labels = scales::percent_format(scale = 1)) +
    scale_color_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    scale_fill_manual(values = c("Kamala Harris" = "blue", "Donald Trump" = "red")) +
    guides(color = guide_legend(title = "Candidate", override.aes = list(fill = NA, linetype = 1)),
           fill = "none")

  # Save the plot to the list
  all_plots[[state]] <- plot
}
```

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-swingresults
#| fig-cap: "On average, Trump has had narrow leads in Arizona, Georgia, Nevada, and North Carolina, while Harris has narrow leads in Michigan, Pennsylvania, and Wisconsin."
#| fig-subcap: ["Arizona: Trump +1.61", "Georgia: Trump +3.01", "Nevada: Trump +0.37","North Carolina: Trump +0.44", "Michigan: Harris +2.22", "Pennsylvania: Harris +2.57", "Wisconsin: Harris +3.31", "Nebraska CD-2: Harris + 11.87"] 
#| layout-ncol: 2
#| layout-nrow: 4

az <- all_plots[["Arizona"]]
ga <- all_plots[["Georgia"]]
nv <- all_plots[["Nevada"]]
nc <- all_plots[["North Carolina"]]
mi <- all_plots[["Michigan"]]
pa <- all_plots[["Pennsylvania"]]
wi <- all_plots[["Wisconsin"]]
ne2 <- all_plots[["Nebraska CD-2"]]

print(az)
print(ga)
print(nv)
print(nc)
print(mi)
print(pa)
print(wi)
print(ne2)
```

# Discussion {#sec-discussion}

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this.

## Second discussion point

Please don't use these as sub-heading labels - change them to be what your point actually is.

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {.unnumbered}

# Idealized methodology {#sec-idealized-meth}

## Idealized survey

# Pollster methodology overview and evaluation {#sec-pollster-meth}

# Additional data details

## Data Cleaning {#sec-data-cleaning}

## Polling averages from before President Joe Biden ended his re-election campaign {#sec-Biden}

```{r}
#| label: fig-nationalavg
#| fig-cap: National popular vote averages for the Democratic and Republican presidential nominees since May 5, 2024 (six months before election day). 
#| echo: false
#| warning: false
#| message: false

national <- analysis_data |>
  filter(state=="National")

ggplot(national, aes(x = end_date, y = pct, color = party)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.2) +            # Add points for each individual poll
  scale_color_manual(values = c("DEM" = "blue", "REP" = "red")) +
  geom_text(aes(x = as.Date("2024-07-21") + 1, y = 55,  # Adjust x to move the label to the right
                label = "Biden ends re-election campaign"), 
            color = "#A9A9A9", 
            vjust = -0.5,  # Adjust vertical position
            hjust = 0,     # Keep it left-aligned for better placement
            size = 2.5) + 
  geom_vline(xintercept = as.Date("2024-07-21"), linetype = "dashed", color = "#A9A9A9") +
  labs(title = "National Polling Average by Party (DEM vs REP)",
       x = "",
       y = "",
       color = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %e")  # Use scale_x_date for date variables
```

```{r}
#| label: fig-sevenbattlegrounds
#| fig-cap: seven battleground states
#| echo: false
#| warning: false
#| message: false
sevenbattlegrounds <- analysis_data |>
  filter(state=="Wisconsin" | state == "Michigan" | state == "Pennsylvania" |
           state == "Nevada" | state == "Arizona" | state == "Georgia" | 
           state == "North Carolina" | state == "Nebraska CD-2")

ggplot(sevenbattlegrounds, aes(x = end_date, y = pct, color = party)) +
  stat_summary(geom = "line", fun = mean) +      # Plot the mean line for polling percentages
  geom_point(size = 1, alpha = 0.15) +            # Add points for each individual poll
  scale_color_manual(values = c("DEM" = "blue", "REP" = "red")) +
  geom_text(aes(x = as.Date("2024-07-21") + 1, y = 55,  # Adjust x to move the label to the right
                label = "Biden ends re-election campaign"),
            color = "#A9A9A9",
            vjust = -0.5,  # Adjust vertical position
            hjust = 0,     # Keep it left-aligned for better placement
            size = 1.7) +
  geom_vline(xintercept = as.Date("2024-07-21"), linetype = "dashed", color = "#A9A9A9") +
  labs(title = "National Polling Average by Party (DEM vs REP)",
       x = "",
       y = "",
       color = "") +
  labs(title = "swing states",
       x = "Date",
       y = "Average Polling %",
       color = "Party") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(40, 60), labels = scales::percent_format(scale = 1)) +
  scale_x_date(date_breaks = "2 month", date_labels = "%b %e") +
  facet_wrap(~state)
```

# Model details {#sec-model-details}

Model summary is shown in @tbl-model-summary

```{r}
#| echo: false
#| eval: true
#| label: tbl-model-summary
#| tbl-cap: "Explanatory models of support for Harris and Trump based on ..."
#| warning: false

modelsummary::modelsummary(
  list(
    "Harris" = harris_model,
    "Trump" = trump_model
  ),
  statistic = "mad",
  fmt = 2
)
```

## Posterior predictive check

### Harris Model

In @fig-ppcheckandposteriorvspriorharris-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvspriorharris-2 we compare the posterior with the prior. This shows...

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvspriorharris
#| layout-ncol: 2
#| fig-cap: "Examining how the model for support for Harris fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

# library(bayesplot)
# library(splines)
# library(ggplot2)
# 
# pp_check(harris_model) +
#   theme_classic() +
#   theme(legend.position = "bottom")
# 
# posterior_vs_prior(harris_model) +
#   theme_minimal() +
#   scale_color_brewer(palette = "Set1") +
#   theme(legend.position = "bottom") +
#   coord_flip()
```

### Trump Model

In @fig-ppcheckandposteriorvspriortrump-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvspriortrump-2 we compare the posterior with the prior. This shows...

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvspriortrump
#| layout-ncol: 2
#| fig-cap: "Examining how the model for support for Trump, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

# library(bayesplot)
# library(splines)
# 
# pp_check(trump_model) +
#   theme_classic() +
#   theme(legend.position = "bottom")
# 
# posterior_vs_prior(trump_model) +
#   theme_minimal() +
#   scale_color_brewer(palette = "Set1") +
#   theme(legend.position = "bottom") +
#   coord_flip()
```

## Model Diagnostics

### Harris Model

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm for the Harris model"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

# plot(harris_model, "trace")
# 
# plot(harris_model, "rhat")
```

### Trump Model

@fig-trumpdiagnostics-1 is a trace plot. It shows... This suggests...

@fig-trumpdiagnostics-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-trumpdiagnostics
#| fig-cap: "Checking the convergence of the MCMC algorithm for the Harris model"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

# plot(trump_model, "trace")
# 
# plot(trump_model, "rhat")
```

\newpage

# References
